<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Android运行Docker！(Termux + QEMU + linux_alpine, qemu网络映射)</title>
      <link href="/2019/08/19/Android%E8%BF%90%E8%A1%8CDocker%EF%BC%81(Termux%20+%20QEMU%20+%20linux_alpine,%20qemu%E7%BD%91%E7%BB%9C%E6%98%A0%E5%B0%84)/"/>
      <url>/2019/08/19/Android%E8%BF%90%E8%A1%8CDocker%EF%BC%81(Termux%20+%20QEMU%20+%20linux_alpine,%20qemu%E7%BD%91%E7%BB%9C%E6%98%A0%E5%B0%84)/</url>
      
        <content type="html"><![CDATA[<p>此教程将教你如何在Android端搭docker</p><ol><li><p>Docker<br>Docker是一个开放源代码软件项目，让应用程序部署在软件货柜下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。<br>StageGuard<br>Android运行Docker！(Termux + QEMU + linux_alpine, qemu网络映射)<br>发表于 2019-08-15| 更新于 2019-08-19<br>字数总计: 1.6k|阅读时长: 6 分钟|阅读量: 122<br>此教程将教你如何在Android端搭docker</p></li><li><p>Docker<br>Docker是一个开放源代码软件项目，让应用程序部署在软件货柜下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。</p></li></ol><p>(来自<a href="https://zh.m.wikipedia.org/wiki/Docker" target="_blank" rel="noopener">https://zh.m.wikipedia.org/wiki/Docker</a>)</p><p>· 为什么在android不能使用docker<br>众多厂商阉割掉了cgroup和namespace等docker需要的功能</p><p>· 你为什么还说要在android运行docker，标题党！<br>……<br>所以我们这次用QEMU虚拟机模拟x86_64的linux系统</p><p>· 效率怎样<br>非常低，在我骁龙625设备上运行docker指令大概需要15秒才有反应(alpine standard版)</p><p>· 那些有啥用啊<br>没什么用，就是折腾，看着别人抱怨android不能运行docker而我能运行的感觉很爽，至少能运行</p><p>(废话连篇)</p><ol start="2"><li>准备工作<br>①. Termux<br>请看上一篇文章：准备工作 Termux<br>②. Alpine Linux系统镜像<br>Small. Simple. Secure.<br>Alpine Linux is a security-oriented, lightweight Linux distribution based on musl libc and busybox.<br>(来自<a href="https://alpinelinux.org/" target="_blank" rel="noopener">https://alpinelinux.org/</a>)</li></ol><p>使用Alpine的原因：</p><p>体积占用小，完全安装后的镜像不到1gb<br>安装快(废话)<br>内存占用小，idle状态仅占用30多MB内存<br>传送门：<br>standard-x86_64: alpine-standard-3.10.1-x86_64.iso(v3.10.1, OfficialSite)，或者在Termux中：</p><p>wget <a href="http://dl-cdn.alpinelinux.org/alpine/v3.10/releases/x86_64/alpine-standard-3.10.1-x86_64.iso" target="_blank" rel="noopener">http://dl-cdn.alpinelinux.org/alpine/v3.10/releases/x86_64/alpine-standard-3.10.1-x86_64.iso</a><br>virtual-x86_64: alpine-virt-3.10.1-x86_64.iso(v3.10.1, OfficialSite)，或者在Termux中：</p><p>wget <a href="http://dl-cdn.alpinelinux.org/alpine/v3.10/releases/x86_64/alpine-virt-3.10.1-x86_64.iso" target="_blank" rel="noopener">http://dl-cdn.alpinelinux.org/alpine/v3.10/releases/x86_64/alpine-virt-3.10.1-x86_64.iso</a><br>官网上写到visual版与standard版相似但对虚拟机有特殊优化。<br>standard版我已测试成功，这次使用visual版。</p><p>③. VNC Viewer (可选)<br>用来连接qemu虚拟机的”显示器”，还可以连接蓝牙/OTG鼠标和键盘，非常强大</p><p>为什么是可选，因为qemu有不输出图像模式(-nographic)，直接在termux控制台输出，不需要”显示器”，但是有可能翻车。</p><p>传送门：<br>VNC Viewer(GooglePlay)</p><ol start="3"><li>详细过程<br>Ⅰ. 安装依赖<br>在Termux中：</li></ol><p>pkg install x11-repo unstable-repo<br>pkg install qemu-utils qemu-system-x86_64<br>Ⅱ. 创建虚拟镜像(硬盘)<br>在Termux中：</p><p>qemu-img create -f qcow2 virt-alpine.img 5g<br>创建镜像<br>创建镜像</p><p>参数中5g代表创建一个最大容量为5g的镜像，可调节，最少2g以保证docker能正常安装。</p><p>Ⅲ. 启动虚拟机<br>在Termux中：</p><p>qemu-system-x86_64 -hda virt-alpine.img -cdrom alpine-virt-3.10.1-x86_64.iso -boot d -m 512 -nographic<br>参数解释：</p><p>-hda : 启动的虚拟硬盘<br>-cdrom : 启动的光盘镜像文件(相当于用光盘安装windows)<br>-boot : 启动槽位，选d (我也不是太清楚)<br>-m : 内存大小，单位mb<br>-nographic : 无图像模式，直接在控制台输出<br>–vnc :1 : 以vnc为图像模式输出到”显示器”，并占用vnc 1端口<br>先使用-nographic模式启动，若长时间没出现alpine bootlog这界面，则先按CTRL+X+A结束进程(或用htop杀掉qemu进程)，再用–vnc :1 vnc图像模式启动<br>alpine bootlog<br>alpine bootlog</p><p>如何连接：</p><p>打开VNC Viewer<br>点击右下角加号(+)<br>Address填localhost:1(–vnc占用的端口)，name随意<br>点击CREATE→CONNECT，就可以连接了</p><p>(用VNC Viewer操作可能会麻烦，建议用蓝牙/OTG鼠标键盘)<br>用VNC连接qemu”显示器”<br>用VNC连接qemu”显示器”<br>Ⅳ. 安装Alpine到虚拟硬盘<br>· 使用root账户登录：<br>登录到alpine<br>登录到alpine</p><p>· 配置网络：<br>在alpine中，使用vi编辑器：</p><p>vi /etc/network/interfaces<br>添加如下配置</p><p>auto lo<br>iface lo inet loopback<br>auto eth0<br>iface eth0 inet dhcp<br>保存后重启网络：</p><p>/etc/init.d/networking restart<br>网络重启成功<br>网络重启成功</p><p>这样alpine就能访问互联网了</p><p>· 设置软件源：<br>setup-alpine<br>选择21(清华大学源)，等待更新即可</p><p>· 安装：<br>setup-alpine<br>详细配置：</p><p>Select keyboard layout: cn (选择CN键盘布局)<br>Select variant (cn)<br>Enter system hostname: stageguard (输入hostname名称，随意)<br>Which one do you want to initialize? (or ‘?’ or ‘done’) [eth0]<br>Ip address for eth0? (or ‘dhcp’, ‘none’, ‘?’) [10.0.2.15] dhcp (选dhcp)<br>Changing password for root (修改root用户密码)<br>Which timezone are you in? (‘?’ for list) [UTC] Asia/Shanghai (时区填Asia/Shanghai)<br>HTTP/FTP proxy URL? (e.g. ‘<a href="http://proxy:8080&#39;" target="_blank" rel="noopener">http://proxy:8080&#39;</a>, or ‘none’) [none] (代理地址，默认none)<br>Enter mirror number (1-47) or URL to add (or r/f/e/done) [f]: 21 (选择软件源，21(清华源))<br>Which SSH server? (‘openssh’, ‘dropbear’ or ‘none’) [openssh] (SSH服务器，选择openssh(默认))<br>Which disk(s) would you like to use? (or ‘?’ for help or ‘none’) [none]sda (安装在何处，选sda)<br>How would you like to use it? (‘sys’, ‘data’, ‘lvm’ or ‘?’ for help) [?] sys (安装方式，选sys)<br>WARNING: Erase the above disk(s) and continue? [y/N]: y (清除整个硬盘，y(是))<br>若出现网络问题：<br>网络问题<br>网络问题</p><p>应该是默认dns服务器异常。<br>编辑/etc/resolv.conf<br>将10.0.2.3改为8.8.8.8即可<br>vi /etc/resolv.conf<br>Installing system on /dev/sda3:<br>initramfs: creating /boot/it…..<br>Installation is complete. Please reboot.</p><p>安装完成，现在关闭虚拟机</p><p>poweroff<br>Ⅴ. 启动Alpine并安装docker<br>· 启动qemu虚拟机<br>在Termux中：</p><p>qemu-system-x86_64 -hda virt-alpine.img -boot c -m 512 -netdev user,id=nde1,hostfwd=tcp::2222-:22 -device e1000,netdev=nde1,id=d-net1 -nographic<br>参数解释：</p><p>-hda : 启动的虚拟硬盘<br>-boot : 启动槽位，选c (我也不是太清楚)<br>-m : 内存大小，单位mb<br>-netdev : 网络配置，详情请看QEMU_Wiki:Documentation/Networking<br>-device : 设备配置(当前指向网络设备)<br>-nographic : 无图像模式，直接在控制台输出<br>–vnc :1 : 以vnc为图像模式输出到”显示器”，并占用vnc 1端口<br>-netdev参数中的hostfwd可以映射网络，当前配置会将虚拟机中22(SSH默认)端口映射到物理网络的2222端口上。</p><p>· 配置SSHD(可选)<br>在Alpine中：</p><p>vi /etc/ssh/sshd_config<br>取消注释PermitRootLogin并修改为yes<br>修改sshd_config<br>修改sshd_config</p><p>重启sshd</p><p>现在外部ssh就可以登录alpine的root账户了<br>在Termux中：</p><p>ssh root@localhost -p 2222<br>· 添加community源<br>在alpine中，docker在其comminuty源里</p><p>vi /etc/apk/repositories<br>取消注释comminuty源<br>alpine源<br>alpine源</p><p>修改完成后，执行：</p><p>apk update<br>· 安装docker<br>apk add docker<br>安装完成<br>安装完成</p><p>· 修改docker为开机(虚拟机)启动，启动docker</p><p>#使docker开机启动<br>rc-update add docker</p><p>#开启docker服务<br>service docker start</p><p>#后台启动<br>setsid containerd<br>setsid dockerd<br>StageGuard<br>Android运行Docker！(Termux + QEMU + linux_alpine, qemu网络映射)<br> 发表于 2019-08-15| 更新于 2019-08-19<br>字数总计: 1.6k|阅读时长: 6 分钟|阅读量: 122<br>此教程将教你如何在Android端搭docker</p><ol><li>Docker<br>Docker是一个开放源代码软件项目，让应用程序部署在软件货柜下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。</li></ol><p>(来自<a href="https://zh.m.wikipedia.org/wiki/Docker" target="_blank" rel="noopener">https://zh.m.wikipedia.org/wiki/Docker</a>)</p><p>· 为什么在android不能使用docker<br>众多厂商阉割掉了cgroup和namespace等docker需要的功能</p><p>· 你为什么还说要在android运行docker，标题党！<br>……<br>所以我们这次用QEMU虚拟机模拟x86_64的linux系统</p><p>· 效率怎样<br>非常低，在我骁龙625设备上运行docker指令大概需要15秒才有反应(alpine standard版)</p><p>· 那些有啥用啊<br>没什么用，就是折腾，看着别人抱怨android不能运行docker而我能运行的感觉很爽，至少能运行</p><p>(废话连篇)</p><ol start="2"><li>准备工作<br>①. Termux<br>请看上一篇文章：准备工作 Termux<br>②. Alpine Linux系统镜像<br>Small. Simple. Secure.<br>Alpine Linux is a security-oriented, lightweight Linux distribution based on musl libc and busybox.<br>(来自<a href="https://alpinelinux.org/" target="_blank" rel="noopener">https://alpinelinux.org/</a>)</li></ol><p>使用Alpine的原因：</p><p>体积占用小，完全安装后的镜像不到1gb<br>安装快(废话)<br>内存占用小，idle状态仅占用30多MB内存<br>传送门：<br>standard-x86_64: alpine-standard-3.10.1-x86_64.iso(v3.10.1, OfficialSite)，或者在Termux中：</p><p>wget <a href="http://dl-cdn.alpinelinux.org/alpine/v3.10/releases/x86_64/alpine-standard-3.10.1-x86_64.iso" target="_blank" rel="noopener">http://dl-cdn.alpinelinux.org/alpine/v3.10/releases/x86_64/alpine-standard-3.10.1-x86_64.iso</a><br>virtual-x86_64: alpine-virt-3.10.1-x86_64.iso(v3.10.1, OfficialSite)，或者在Termux中：</p><p>wget <a href="http://dl-cdn.alpinelinux.org/alpine/v3.10/releases/x86_64/alpine-virt-3.10.1-x86_64.iso" target="_blank" rel="noopener">http://dl-cdn.alpinelinux.org/alpine/v3.10/releases/x86_64/alpine-virt-3.10.1-x86_64.iso</a><br>官网上写到visual版与standard版相似但对虚拟机有特殊优化。<br>standard版我已测试成功，这次使用visual版。</p><p>③. VNC Viewer (可选)<br>用来连接qemu虚拟机的”显示器”，还可以连接蓝牙/OTG鼠标和键盘，非常强大</p><p>为什么是可选，因为qemu有不输出图像模式(-nographic)，直接在termux控制台输出，不需要”显示器”，但是有可能翻车。</p><p>传送门：<br>VNC Viewer(GooglePlay)</p><ol start="3"><li>详细过程<br>Ⅰ. 安装依赖<br>在Termux中：</li></ol><p>pkg install x11-repo unstable-repo<br>pkg install qemu-utils qemu-system-x86_64<br>Ⅱ. 创建虚拟镜像(硬盘)<br>在Termux中：</p><p>qemu-img create -f qcow2 virt-alpine.img 5g<br>创建镜像<br>创建镜像</p><p>参数中5g代表创建一个最大容量为5g的镜像，可调节，最少2g以保证docker能正常安装。</p><p>Ⅲ. 启动虚拟机<br>在Termux中：</p><p>qemu-system-x86_64 -hda virt-alpine.img -cdrom alpine-virt-3.10.1-x86_64.iso -boot d -m 512 -nographic<br>参数解释：</p><p>-hda : 启动的虚拟硬盘<br>-cdrom : 启动的光盘镜像文件(相当于用光盘安装windows)<br>-boot : 启动槽位，选d (我也不是太清楚)<br>-m : 内存大小，单位mb<br>-nographic : 无图像模式，直接在控制台输出<br>–vnc :1 : 以vnc为图像模式输出到”显示器”，并占用vnc 1端口<br>先使用-nographic模式启动，若长时间没出现alpine bootlog这界面，则先按CTRL+X+A结束进程(或用htop杀掉qemu进程)，再用–vnc :1 vnc图像模式启动<br>alpine bootlog<br>alpine bootlog</p><p>如何连接：</p><p>打开VNC Viewer<br>点击右下角加号(+)<br>Address填localhost:1(–vnc占用的端口)，name随意<br>点击CREATE→CONNECT，就可以连接了</p><p>(用VNC Viewer操作可能会麻烦，建议用蓝牙/OTG鼠标键盘)<br>用VNC连接qemu”显示器”<br>用VNC连接qemu”显示器”<br>Ⅳ. 安装Alpine到虚拟硬盘<br>· 使用root账户登录：<br>登录到alpine<br>登录到alpine</p><p>· 配置网络：<br>在alpine中，使用vi编辑器：</p><p>vi /etc/network/interfaces<br>添加如下配置</p><p>auto lo<br>iface lo inet loopback<br>auto eth0<br>iface eth0 inet dhcp<br>保存后重启网络：</p><p>/etc/init.d/networking restart<br>网络重启成功<br>网络重启成功</p><p>这样alpine就能访问互联网了</p><p>· 设置软件源：<br>setup-alpine<br>选择21(清华大学源)，等待更新即可</p><p>· 安装：<br>setup-alpine<br>详细配置：</p><p>Select keyboard layout: cn (选择CN键盘布局)<br>Select variant (cn)<br>Enter system hostname: stageguard (输入hostname名称，随意)<br>Which one do you want to initialize? (or ‘?’ or ‘done’) [eth0]<br>Ip address for eth0? (or ‘dhcp’, ‘none’, ‘?’) [10.0.2.15] dhcp (选dhcp)<br>Changing password for root (修改root用户密码)<br>Which timezone are you in? (‘?’ for list) [UTC] Asia/Shanghai (时区填Asia/Shanghai)<br>HTTP/FTP proxy URL? (e.g. ‘<a href="http://proxy:8080&#39;" target="_blank" rel="noopener">http://proxy:8080&#39;</a>, or ‘none’) [none] (代理地址，默认none)<br>Enter mirror number (1-47) or URL to add (or r/f/e/done) [f]: 21 (选择软件源，21(清华源))<br>Which SSH server? (‘openssh’, ‘dropbear’ or ‘none’) [openssh] (SSH服务器，选择openssh(默认))<br>Which disk(s) would you like to use? (or ‘?’ for help or ‘none’) [none]sda (安装在何处，选sda)<br>How would you like to use it? (‘sys’, ‘data’, ‘lvm’ or ‘?’ for help) [?] sys (安装方式，选sys)<br>WARNING: Erase the above disk(s) and continue? [y/N]: y (清除整个硬盘，y(是))<br>若出现网络问题：<br>网络问题<br>网络问题</p><p>应该是默认dns服务器异常。<br>编辑/etc/resolv.conf<br>将10.0.2.3改为8.8.8.8即可<br>vi /etc/resolv.conf<br>Installing system on /dev/sda3:<br>initramfs: creating /boot/it…..<br>Installation is complete. Please reboot.</p><p>安装完成，现在关闭虚拟机</p><p>poweroff<br>Ⅴ. 启动Alpine并安装docker<br>· 启动qemu虚拟机<br>在Termux中：</p><p>qemu-system-x86_64 -hda virt-alpine.img -boot c -m 512 -netdev user,id=nde1,hostfwd=tcp::2222-:22 -device e1000,netdev=nde1,id=d-net1 -nographic<br>参数解释：</p><p>-hda : 启动的虚拟硬盘<br>-boot : 启动槽位，选c (我也不是太清楚)<br>-m : 内存大小，单位mb<br>-netdev : 网络配置，详情请看QEMU_Wiki:Documentation/Networking<br>-device : 设备配置(当前指向网络设备)<br>-nographic : 无图像模式，直接在控制台输出<br>–vnc :1 : 以vnc为图像模式输出到”显示器”，并占用vnc 1端口<br>-netdev参数中的hostfwd可以映射网络，当前配置会将虚拟机中22(SSH默认)端口映射到物理网络的2222端口上。</p><p>· 配置SSHD(可选)<br>在Alpine中：</p><p>vi /etc/ssh/sshd_config<br>取消注释PermitRootLogin并修改为yes<br>修改sshd_config<br>修改sshd_config</p><p>重启sshd</p><p>现在外部ssh就可以登录alpine的root账户了<br>在Termux中：</p><p>ssh root@localhost -p 2222<br>· 添加community源<br>在alpine中，docker在其comminuty源里</p><p>vi /etc/apk/repositories<br>取消注释comminuty源<br>alpine源<br>alpine源</p><p>修改完成后，执行：</p><p>apk update<br>· 安装docker<br>apk add docker<br>安装完成<br>安装完成</p><p>· 修改docker为开机(虚拟机)启动，启动docker</p><p>#使docker开机启动<br>rc-update add docker</p><p>#开启docker服务<br>service docker start</p><p>#后台启动<br>setsid containerd<br>setsid dockerd<br>docker启动完成<br>docker启动完成</p><p>· 测试<br>docker info<br>docker info<br>docker info</p><p>DOCKER 安装完成！<br>啊。。。我肝痛！<br>如有问题一定要在下面询问！<br>文章中若有错误也欢迎指出！</p><p>参考资料：</p><p><a href="https://github.com/diogok/termux-qemu-alpine-docker/blob/master/README.md" target="_blank" rel="noopener">https://github.com/diogok/termux-qemu-alpine-docker/blob/master/README.md</a><br><a href="https://stageguard.gitee.io/2019/07/30/run-gogs-on-android/" target="_blank" rel="noopener">https://stageguard.gitee.io/2019/07/30/run-gogs-on-android/</a><br>转载自stageguard</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/14/hello-world/"/>
      <url>/2019/07/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
